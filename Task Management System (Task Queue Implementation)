#include <iostream>
#include <queue>
using namespace std;

// Structure for Task
struct Task {
    int pid;
    int arrivalTime;
    int burstTime;
    int priority;
    int deadline;

    bool operator<(const Task& t) const {
        return deadline > t.deadline; // Sorting by earliest deadline first (EDF)
    }
};

// Priority queue for tasks (Min-Heap based on Deadline)
priority_queue<Task> taskQueue;

// Function to add tasks to the queue
void addTask(int pid, int arrival, int burst, int priority, int deadline) {
    Task newTask = {pid, arrival, burst, priority, deadline};
    taskQueue.push(newTask);
    cout << "Task " << pid << " added to the queue.\n";
}

// Display tasks in queue
void displayTasks() {
    priority_queue<Task> tempQueue = taskQueue;
    cout << "PID\tArrival\tBurst\tPriority\tDeadline\n";
    while (!tempQueue.empty()) {
        Task t = tempQueue.top();
        cout << t.pid << "\t" << t.arrivalTime << "\t" << t.burstTime << "\t"
             << t.priority << "\t\t" << t.deadline << "\n";
        tempQueue.pop();
    }
}

int main() {
    addTask(1, 0, 5, 3, 10);
    addTask(2, 2, 3, 2, 7);
    addTask(3, 4, 6, 1, 12);
    
    cout << "\nTask Queue:\n";
    displayTasks();
    
    return 0;
}
